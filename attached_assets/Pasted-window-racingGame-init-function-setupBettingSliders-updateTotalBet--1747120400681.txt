window.racingGame = {
    init: function() {
        setupBettingSliders();
        updateTotalBet();
    },
    updateProgress: function(progress) {
        // Update DOM progress bars
        Object.keys(progress).forEach(suit => {
            const progressBar = document.getElementById(`${suit}-progress`);
            if (progressBar) progressBar.style.width = `${progress[suit]}%`;
        });
    }
};

function initSaloonScene() {
    // Reset betting UI
    document.querySelectorAll('.bet-display').forEach(display => {
        display.textContent = '0';
    });
    updateTotalBet();

    // Set up the start race button
    const startRaceButton = document.getElementById('start-race');
    if (startRaceButton) {
        startRaceButton.addEventListener('click', startRace);
    }

    // Initialize progress bars
    const progressBars = {
        hearts: document.getElementById('hearts-progress'),
        diamonds: document.getElementById('diamonds-progress'),
        clubs: document.getElementById('clubs-progress'),
        spades: document.getElementById('spades-progress')
    };
    Object.values(progressBars).forEach(bar => {
        if (bar) bar.style.width = '0%';
    });
}

function startRace() {
    const betValues = {
        hearts: parseInt(document.getElementById('hearts-bet-display').textContent) || 0,
        diamonds: parseInt(document.getElementById('diamonds-bet-display').textContent) || 0,
        clubs: parseInt(document.getElementById('clubs-bet-display').textContent) || 0,
        spades: parseInt(document.getElementById('spades-bet-display').textContent) || 0
    };

    const totalBet = Object.values(betValues).reduce((sum, val) => sum + val, 0);
    if (totalBet > playerData.cattleBalance) {
        showNotification('Not enough $CATTLE to place this bet!', 'error');
        return;
    }

    playerData.cattleBalance -= totalBet;
    playerData.stats.totalBurned += totalBet * 0.1; // 10% burn

    // Simulate a race
    const suits = ['hearts', 'diamonds', 'clubs', 'spades'];
    let progress = { hearts: 0, diamonds: 0, clubs: 0, spades: 0 };
    const raceInterval = setInterval(() => {
        const suit = suits[Math.floor(Math.random() * suits.length)];
        progress[suit] = Math.min(100, progress[suit] + 10);
        window.racingGame.updateProgress(progress);

        // Check for winner
        const winner = Object.keys(progress).find(suit => progress[suit] >= 100);
        if (winner) {
            clearInterval(raceInterval);
            const winnings = betValues[winner] * 4; // 4x odds
            playerData.cattleBalance += winnings;
            playerData.stats.racesWon += 1;
            playerData.stats.totalEarned += winnings;
            showResult('Race Finished!', `${winner.toUpperCase()} won! You earned ${winnings} $CATTLE`, 'success', true);
            updateUI();
        }
    }, 500);
}